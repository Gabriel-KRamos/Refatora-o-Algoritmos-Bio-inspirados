# -*- coding: utf-8 -*-
"""Problema da Mochila com Algoritmos Bio-Inspirados

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RnpxNgrnHj-V05TGLgilOm3k7tivoyz-
"""

import random
import time

def calcular_aptidao(individuo, pesos, valores, capacidade):
    peso_total = sum(p * i for p, i in zip(pesos, individuo))
    valor_total = sum(v * i for v, i in zip(valores, individuo))
    if peso_total > capacidade:
        return 0  # Penalização
    return valor_total

def algoritmo_genetico(pesos, valores, capacidade, tam_pop=50, geracoes=300, taxa_mut=0.05):
    inicio = time.time()
    n = len(pesos)
    pop = [[random.randint(0, 1) for _ in range(n)] for _ in range(tam_pop)]
    total_mutacoes = 0

    for _ in range(geracoes):
        aptidoes = [calcular_aptidao(ind, pesos, valores, capacidade) for ind in pop]
        nova_pop = []

        for _ in range(tam_pop // 2):
            pais = random.choices(pop, weights=[max(0.001, a) for a in aptidoes], k=2)
            ponto = random.randint(1, n-1)
            filho1 = pais[0][:ponto] + pais[1][ponto:]
            filho2 = pais[1][:ponto] + pais[0][ponto:]

            for filho in [filho1, filho2]:
                if random.random() < taxa_mut:
                    idx = random.randint(0, n-1)
                    filho[idx] = 1 - filho[idx]
                    total_mutacoes += 1

            nova_pop.extend([filho1, filho2])

        pop = nova_pop

    melhor = max(pop, key=lambda ind: calcular_aptidao(ind, pesos, valores, capacidade))
    fim = time.time()
    return {
        "algoritmo": "Genético",
        "melhor_solucao": [int(x) for x in melhor],
        "melhor_valor": calcular_aptidao(melhor, pesos, valores, capacidade),
        "tempo_execucao_seg": round(fim - inicio, 4),
        "total_trocas": total_mutacoes
    }

if __name__ == "__main__":
    n_itens = 1000
    pesos = [random.randint(1, 20) for _ in range(n_itens)]
    valores = [random.randint(10, 100) for _ in range(n_itens)]
    capacidade = int(sum(pesos) * 0.4)

    resultado = algoritmo_genetico(pesos, valores, capacidade)

    print(f"\n--- {resultado['algoritmo']} ---")
    print(f"Melhor Valor: {resultado['melhor_valor']}")
    print(f"Tempo de Execução (s): {resultado['tempo_execucao_seg']}")
    print(f"Total de Trocas/Movimentos: {resultado['total_trocas']}")